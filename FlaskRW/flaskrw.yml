#Deployment
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: flask-rw
  labels:
    app: flask-rw
spec:
  selector:
    matchLabels:
      app: flask-rw
  revisionHistoryLimit: 3
  replicas: 3
  template:
    metadata:
      name: flask-rw
      labels:
        app: flask-rw
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: flask-rw
      containers:
        - name: flask-rw
          image: fureasu346/flask:rw
          ports:
            - containerPort: 8765
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /app/data
---
#ClusterIP Service
apiVersion: v1
kind: Service
metadata:
  name: flask-rw
  labels:
    app: flask-rw
spec:
  selector:
    app: flask-rw
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8765
  type: ClusterIP
---
#Ingress 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flask-rw
  annotations:
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/target-type: 'ip'
    alb.ingress.kubernetes.io/load-balancer-name: "flaskrw-eks-intsmm-net"
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:ap-southeast-1:730335496277:certificate/9f66c8c9-a48d-423e-8765-af4f032fdaf5"
    alb.ingress.kubernetes.io/target-group-attributes: "stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=3600"
spec:
  ingressClassName: alb
  tls:
  - hosts:
    - flaskrw.eks.intsmm.net
  rules:
    - host: flaskrw.eks.intsmm.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flask-rw
                port:
                  number: 80
